name: Receive Release

on:
  repository_dispatch:
    types: [create-release]

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  download-and-release:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            artifact: fixpanic-agent-linux-amd64
          - goos: linux
            goarch: arm64
            artifact: fixpanic-agent-linux-arm64
          - goos: darwin
            goarch: amd64
            artifact: fixpanic-agent-darwin-amd64
          - goos: windows
            goarch: amd64
            artifact: fixpanic-agent-windows-amd64
    
    steps:
      - name: Download artifact from private repo using GitHub CLI
        run: |
          echo "Downloading ${{ matrix.artifact }} from private repository..."
          
          # Create download directory
          mkdir -p binaries
          
          # Download artifact using GitHub CLI
          gh run download ${{ github.event.client_payload.run_id }} \
            --repo fixpanic/fixpanic-connectivity-layer \
            --name ${{ matrix.artifact }} \
            --dir ./binaries/ \
            --pattern "${{ matrix.artifact }}*"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
      
      - name: Verify and prepare binary
        run: |
          echo "Verifying downloaded binary..."
          ls -la ./binaries/
          
          # Find the actual binary file
          BINARY_FILE=$(find ./binaries -name "${{ matrix.artifact }}*" -type f | head -1)
          if [ -z "$BINARY_FILE" ]; then
            echo "‚ùå Binary not found: ${{ matrix.artifact }}"
            exit 1
          fi
          
          echo "‚úÖ Binary found: $BINARY_FILE"
          
          # Rename to standard format if needed
          if [[ "$BINARY_FILE" != *"${{ matrix.artifact }}" ]]; then
            mv "$BINARY_FILE" "./binaries/${{ matrix.artifact }}"
          fi
          
          # Add .exe extension for Windows
          FINAL_NAME="${{ matrix.artifact }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            FINAL_NAME="${FINAL_NAME}.exe"
            mv "./binaries/${{ matrix.artifact }}" "./binaries/${FINAL_NAME}" 2>/dev/null || true
          fi
          
          echo "Final binary name: $FINAL_NAME"
          ls -la ./binaries/
      
      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ./binaries/${{ matrix.artifact }}*
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-bundle:
    needs: download-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts using GitHub CLI
        run: |
          echo "Downloading all artifacts from private repository..."
          
          # Create download directory
          mkdir -p release-assets
          
          # Download all artifacts
          gh run download ${{ github.event.client_payload.run_id }} \
            --repo fixpanic/fixpanic-connectivity-layer \
            --dir ./release-assets/
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
      
      - name: Create release bundle
        run: |
          mkdir -p release-bundle
          
          # Move all binaries to release-bundle
          find ./release-assets -name "fixpanic-agent-*" -type f -exec cp {} ./release-bundle/ \;
          
          cd release-bundle
          
          # Create checksums file
          sha256sum fixpanic-agent-* > checksums.txt
          
          # Create manifest file
          cat > manifest.txt << EOF
          FixPanic Agent Release Bundle
          =============================
          
          Release: ${{ github.event.client_payload.tag }}
          Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          This release contains the following binaries:
          
          $(ls -la fixpanic-agent-*)
          
          Installation Instructions:
          ----------------------------
          
          1. Download the appropriate binary for your platform
          2. Make it executable: chmod +x fixpanic-agent-<os>-<arch>
          3. Run: ./fixpanic-agent-<os>-<arch> --help
          
          Verify integrity using the checksums.txt file.
          
          EOF
          
          ls -la
      
      - name: Upload release bundle
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-bundle/fixpanic-agent-*
            release-bundle/checksums.txt
            release-bundle/manifest.txt
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    needs: [create-release, download-and-release, create-release-bundle]
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "‚úÖ FixPanic Agent Release Complete!"
          echo ""
          echo "üì¶ Binaries downloaded from private repository:"
          echo "  - Linux AMD64"
          echo "  - Linux ARM64" 
          echo "  - Darwin AMD64"
          echo "  - Windows AMD64"
          echo ""
          echo "üîç Release available at:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ github.event.client_payload.tag }}"
          echo ""
          echo "üìã Release bundle includes:"
          echo "  - Individual platform binaries"
          echo "  - Checksums for integrity verification"
          echo "  - Installation manifest with instructions"