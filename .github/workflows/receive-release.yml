name: Receive Release

on:
  repository_dispatch:
    types: [create-release]

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.release_id }}
    steps:
      - name: Debug received payload
        run: |
          echo "=== Repository Dispatch Received ==="
          echo "Tag: ${{ github.event.client_payload.tag }}"
          echo "Ref: ${{ github.event.client_payload.ref }}"
          echo "Artifacts: ${{ toJson(github.event.client_payload.artifacts) }}"
          echo "Source: ${{ github.event.client_payload.source_repo }}"

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = context.payload.client_payload.tag;
            const releaseName = context.payload.client_payload.release_name || tag;
            const body = context.payload.client_payload.body || `Release ${tag}`;

            console.log(`Creating release ${tag}...`);

            try {
              // Check if release exists
              let release;
              try {
                release = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: tag
                });
                console.log('✅ Release already exists');
              } catch (error) {
                if (error.status === 404) {
                  release = await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: tag,
                    name: releaseName,
                    body: body,
                    draft: false,
                    prerelease: false
                  });
                  console.log('✅ Release created successfully');
                } else {
                  throw error;
                }
              }

              core.setOutput('release_id', release.data.id);
              console.log(`Release ID: ${release.data.id}`);

            } catch (error) {
              console.error('❌ Failed to create release:', error.message);
              throw error;
            }

  download-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event.client_payload.artifacts
    strategy:
      matrix:
        include:
          - platform: linux-amd64
          - platform: linux-arm64
          - platform: darwin-amd64
          - platform: darwin-arm64
          - platform: windows-amd64

    steps:
      - name: Download artifact from private repo
        id: download-artifact
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_PAT }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const platform = '${{ matrix.platform }}';
            const artifacts = context.payload.client_payload.artifacts;
            const artifactInfo = artifacts[platform];

            if (!artifactInfo) {
              core.setFailed(`No artifact info for platform: ${platform}`);
              return;
            }

            console.log(`Downloading ${artifactInfo.name} from ${artifactInfo.download_url}`);

            try {
              // Download the artifact zip
              const response = await github.request(artifactInfo.download_url, {
                headers: {
                  'Authorization': `token ${{ secrets.RELEASE_PAT }}`,
                  'Accept': 'application/vnd.github.v3+json'
                }
              });

              // Create directory and save zip
              const artifactDir = './artifacts';
              if (!fs.existsSync(artifactDir)) {
                fs.mkdirSync(artifactDir, { recursive: true });
              }

              const zipPath = path.join(artifactDir, `${artifactInfo.name}.zip`);
              fs.writeFileSync(zipPath, Buffer.from(response.data));

              console.log(`✅ Downloaded zip file: ${zipPath}`);

              // Extract zip
              const { execSync } = require('child_process');
              execSync(`cd ${artifactDir} && unzip -o ${artifactInfo.name}.zip`);
              fs.unlinkSync(zipPath);

              console.log('✅ Extracted zip file');

              // Find binary file
              const files = fs.readdirSync(artifactDir);
              console.log('Files in artifact directory:', files);

              const binaryFile = files.find(f =>
                f.includes(artifactInfo.name) ||
                f.includes('fixpanic-connectivity-layer')
              );

              if (!binaryFile) {
                core.setFailed(`Binary not found in ${artifactInfo.name}. Files: ${files.join(', ')}`);
                return;
              }

              const binaryPath = path.join(artifactDir, binaryFile);

              // Make executable (non-Windows)
              if (!platform.includes('windows')) {
                fs.chmodSync(binaryPath, '755');
              }

              console.log(`✅ Downloaded and prepared: ${binaryFile}`);
              core.setOutput('binary_path', binaryPath);
              core.setOutput('binary_name', binaryFile);

            } catch (error) {
              console.error('❌ Failed to download artifact:', error.message);
              if (error.response) {
                console.error('Response status:', error.response.status);
                console.error('Response data:', error.response.data);
              }
              throw error;
            }

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.download-artifact.outputs.binary_path }}
          tag_name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-metadata:
    needs: [create-release, download-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Generate metadata files
        run: |
          mkdir -p metadata

          # Create checksums placeholder (will be updated with real checksums)
          cat > metadata/checksums.txt << 'EOF'
          # FixPanic Connectivity Layer Release Checksums
          # Generated on: $(date -u)
          # Repository: ${{ github.repository }}
          # Tag: ${{ github.event.client_payload.tag }}

          # Download all binaries and verify with:
          # sha256sum -c checksums.txt
          EOF

          # Create installation manifest
          cat > metadata/manifest.txt << 'EOF'
          FixPanic Connectivity Layer Release
          ====================================

          Release: ${{ github.event.client_payload.tag }}
          Generated: $(date -u)

          This release contains binaries for multiple platforms.

          Installation Instructions:
          -------------------------

          1. Download the appropriate binary for your platform
          2. For Linux/macOS: chmod +x fixpanic-connectivity-layer-<os>-<arch>
          3. Run: ./fixpanic-connectivity-layer-<os>-<arch> --help
          4. For Windows: fixpanic-connectivity-layer-windows-amd64.exe --help

          Verify integrity using checksums.txt
          EOF

          # Create README
          cat > metadata/README.md << 'EOF'
          # FixPanic Connectivity Layer

          ## Overview
          Public release of the FixPanic Connectivity Layer CLI tool.

          ## Download
          Choose the appropriate binary for your platform from the release assets.

          ## Verification
          Use checksums.txt to verify download integrity.

          ## Support
          For issues, refer to the main repository.
          EOF

      - name: Upload metadata
        uses: softprops/action-gh-release@v2
        with:
          files: |
            metadata/checksums.txt
            metadata/manifest.txt
            metadata/README.md
          tag_name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    needs: [create-release, download-and-upload, create-metadata]
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "✅ FixPanic Connectivity Layer Public Release Complete!"
          echo ""
          echo "📦 Binaries downloaded from private repository and uploaded:"
          echo "  - Linux AMD64"
          echo "  - Linux ARM64"
          echo "  - Darwin AMD64"
          echo "  - Windows AMD64"
          echo ""
          echo "🔍 Release available at:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ github.event.client_payload.tag }}"
          echo ""
          echo "📋 Release includes:"
          echo "  - Platform-specific binaries"
          echo "  - Checksums for integrity verification"
          echo "  - Installation instructions and manifest"