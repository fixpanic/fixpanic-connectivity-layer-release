name: Receive Release

on:
  repository_dispatch:
    types: [create-release]

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  download-and-release:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            artifact_key: linux-amd64
          - goos: linux
            goarch: arm64
            artifact_key: linux-arm64
          - goos: darwin
            goarch: amd64
            artifact_key: darwin-amd64
          - goos: windows
            goarch: amd64
            artifact_key: windows-amd64
    
    steps:
      - name: Debug received payload
        run: |
          echo "=== DEBUG: Received payload ==="
          echo "Full payload: ${{ toJson(github.event.client_payload) }}"
          echo "Tag: ${{ github.event.client_payload.tag }}"
          echo "Ref: ${{ github.event.client_payload.ref }}"
          echo "Artifacts: ${{ toJson(github.event.client_payload.artifacts) }}"
          echo "==============================="
      
      - name: Download artifact from private repo via API
        uses: actions/github-script@v7
        id: download-artifact
        with:
          github-token: ${{ secrets.RELEASE_PAT }}
          script: |
            const artifactKey = '${{ matrix.artifact_key }}';
            const artifacts = github.event.client_payload.artifacts;
            
            if (!artifacts || !artifacts[artifactKey]) {
              core.setFailed(`No artifact info found for key: ${artifactKey}`);
              return;
            }
            
            const artifactInfo = artifacts[artifactKey];
            console.log(`Processing ${artifactInfo.name} from ${artifactInfo.download_url}`);
            
            // Download the artifact zip file
            const response = await github.request(artifactInfo.download_url, {
              headers: {
                'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
              }
            });
            
            const fs = require('fs');
            const path = require('path');
            
            // Create binaries directory
            const binariesDir = './binaries';
            if (!fs.existsSync(binariesDir)) {
              fs.mkdirSync(binariesDir, { recursive: true });
            }
            
            // Save the zip file
            const zipPath = path.join(binariesDir, `${artifactInfo.name}.zip`);
            fs.writeFileSync(zipPath, Buffer.from(response.data));
            
            console.log(`‚úÖ Downloaded ${artifactInfo.name}.zip`);
            
            // Extract the zip file
            const { execSync } = require('child_process');
            execSync(`cd ${binariesDir} && unzip -o ${artifactInfo.name}.zip`);
            
            // Remove the zip file
            fs.unlinkSync(zipPath);
            
            console.log(`‚úÖ Extracted ${artifactInfo.name}`);
            
            // List contents for debugging
            const files = fs.readdirSync(binariesDir);
            console.log('Files in binaries directory:', files);
            
            // Find the actual binary file
            const binaryFile = files.find(f => f.includes(artifactInfo.name));
            if (binaryFile) {
              console.log(`‚úÖ Found binary: ${binaryFile}`);
              
              // Make executable (for non-Windows)
              if ('${{ matrix.goos }}' !== 'windows') {
                fs.chmodSync(path.join(binariesDir, binaryFile), '755');
              }
              
              // Store the binary path for next step
              core.setOutput('binary_path', path.join(binariesDir, binaryFile));
              core.setOutput('binary_name', binaryFile);
            } else {
              core.setFailed(`Binary file not found in extracted contents`);
            }
      
      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.download-artifact.outputs.binary_path }}
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-bundle:
    needs: download-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts via API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_PAT }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Create release bundle directory
            const bundleDir = 'release-bundle';
            if (!fs.existsSync(bundleDir)) {
              fs.mkdirSync(bundleDir, { recursive: true });
            }
            
            // Download all artifacts
            const artifacts = github.event.client_payload.artifacts;
            const binariesDir = './binaries';
            
            if (!fs.existsSync(binariesDir)) {
              console.log('‚ö†Ô∏è Binaries directory not found, creating from artifacts');
              fs.mkdirSync(binariesDir, { recursive: true });
              
              // Download all artifacts again for the bundle
              for (const [key, artifactInfo] of Object.entries(artifacts)) {
                console.log(`Downloading ${artifactInfo.name} for bundle...`);
                
                const response = await github.request(artifactInfo.download_url, {
                  headers: {
                    'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                  }
                });
                
                // Save and extract
                const zipPath = path.join(binariesDir, `${artifactInfo.name}.zip`);
                fs.writeFileSync(zipPath, Buffer.from(response.data));
                execSync(`cd ${binariesDir} && unzip -o ${artifactInfo.name}.zip`);
                fs.unlinkSync(zipPath);
              }
            }
            
            // Copy binaries to bundle directory
            const files = fs.readdirSync(binariesDir);
            files.forEach(file => {
              if (fs.statSync(path.join(binariesDir, file)).isFile()) {
                fs.copyFileSync(
                  path.join(binariesDir, file),
                  path.join(bundleDir, file)
                );
              }
            });
            
            // Create checksums file
            const checksums = execSync(`cd ${bundleDir} && sha256sum fixpanic-agent-*`, { encoding: 'utf8' });
            fs.writeFileSync(path.join(bundleDir, 'checksums.txt'), checksums);
            
            // Create manifest file
            const manifest = `FixPanic Agent Release Bundle
            ========================================
            
            Release: ${{ github.event.client_payload.tag }}
            Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            This release contains the following binaries:
            
            ${files.filter(f => f.includes('fixpanic-agent')).join('\n')}
            
            Installation Instructions:
            ----------------------------
            
            1. Download the appropriate binary for your platform
            2. Make it executable: chmod +x fixpanic-agent-<os>-<arch>
            3. Run: ./fixpanic-agent-<os>-<arch> --help
            
            Verify integrity using the checksums.txt file.
            `;
            
            fs.writeFileSync(path.join(bundleDir, 'manifest.txt'), manifest);
            
            console.log('‚úÖ Release bundle created successfully');
            console.log('Files in bundle:', fs.readdirSync(bundleDir));

      - name: Upload release bundle
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-bundle/fixpanic-agent-*
            release-bundle/checksums.txt
            release-bundle/manifest.txt
          tag_name: ${{ github.event.client_payload.tag }}
          name: ${{ github.event.client_payload.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    needs: [download-and-release, create-release-bundle]
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "‚úÖ FixPanic Agent Release Complete!"
          echo ""
          echo "üì¶ Binaries downloaded from private repository:"
          echo "  - Linux AMD64"
          echo "  - Linux ARM64"
          echo "  - Darwin AMD64"
          echo "  - Windows AMD64"
          echo ""
          echo "üîç Release available at:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ github.event.client_payload.tag }}"
          echo ""
          echo "üìã Release bundle includes:"
          echo "  - Individual platform binaries"
          echo "  - Checksums for integrity verification"
          echo "  - Installation manifest with instructions"